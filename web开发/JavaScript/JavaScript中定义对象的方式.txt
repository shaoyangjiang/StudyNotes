30.JavaScript中定义对象的几种方式：
1).根据已有方式扩充其属性和方法
	var object = new Object();
	object.name = "zhangsan";
	object.sayName = function(name){
		this.name = name;
		alert(this.name);
	};
	object.sayName("lisi");//弹出对话框lisi
2).工厂方式
	function createObject(){
		var object = new Object();
		object.username="zhangsan";
		object.password="123";
		object.get = function(){
			alert(this.username+","+this.password);
		}
		return object;
	}
	
	var object1 = createObject();
	var object2 = createObject();
	
	object1.get();//弹出窗口zhangsan，123
----------------------------------------------------
带参数的方式：
	function createObject(username,password){
		var object = new Object();
		object.username=username;
		object.password=password;
		object.get = function(){
			alert(this.username+","+this.password);
		}
		return object;
	}
	
	var object1 = createObject("zhangsan","123");

	object1.get();//弹出窗口zhangsan，123
------------------------------------------------------
带参数的方式，改良版(让一个函数对象被多个对象所共享，而不是每一个对象拥有一个函数对象)
	function get(){
		alert(this.username+","+this.password);
	}
	function createObject(username,password){
		var object = new Object();
		object.username=username;
		object.password=password;
		object.get = get;
		return object;
	}
	
	var object1 = createObject("zhangsan","123");
	object1.get();//弹出窗口zhangsan,123
=============================================================
3)构造函数方式
	function Person(){
		//在执行第一行语句时，js引擎为自动为我们生成一个对象
		this.username="zhangsan";
		this.password="123";
		this.get = function(){
			alert(this.username+","+this.password);
		}
		//此处有一个隐藏的return语句，用于将当前对象返回
	}
	
	var person = new Person();
	person.get();//窗口弹出zhangsan，123
--------------------------------------------
带参数的方式：
	function Person(username,password){
		//在执行第一行语句时，js引擎为自动为我们生成一个对象
		this.username=username;
		this.password=password;
		this.get = function(){
			alert(this.username+","+this.password);
		}
		//此处有一个隐藏的return语句，用于将当前对象返回
	}
	
	var person = new Person("zhangsan","123");
	person.get();//窗口弹出zhagnsan,123
==================================================================
4).原型("prototype")方式
	function Person(){
		
	}
	Person.prototype.username = "zhangsan";
	Person.prototype.password = "123";
	Person.prototype.get = function(){
		alert(this.username+","+this.password);
	}
	var person = new Person();
	person.username = "lisi";
	person.get();//窗口弹出lisi，123
a.单纯使用原型方式定义类无法在构造函数中为属性赋初值，只能在对象生成后再去改变属性值。
b.如果使用原型方式对象，那么生成的所有对象会共享原型中的属性，这样一个对象改变了该属性也会反映到其他对象当中。
=================================================================
5)使用原型+构造函数方式来定义对象
	function Person(){
		this.username = new Array();
		this.password = "123";
	}
	
	Person.prototype.get = function(){
		alert(this.username+","+this.password);
	}
	
	var person1 = new Person();
	person1.username.push("zhangsan");
	person1.get();//窗口对弹出zhangsan，123
==============================================================
6).动态原型方式：在构造函数中通过标准量让所有对象共享一个方法，而每个对象拥有自己的属性。
	function Person(){
		this.username = new Array();
		this.password = "123";
		if(typeof Person.flag == "undefined"){//当用户第一次创建时执行
			Person.prototype.get = function(){
				alert(this.username+","+this.password);
			}
			Person.flag = true;
		}
	}
	
	var person1 = new Person();
	person1.username.push("zhangsan");
	person1.get();
	
	var person2 = new Person();
	person2.username.push("lisi");
	person2.get();//窗口分别打印zhagnsan，123；lisi，123