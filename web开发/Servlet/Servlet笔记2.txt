1.java Servlet是和平台无关的服务器端组件，它运行在Servlet容器中，Servlet容器负责Servlet和客户的通信以及调用Servlet的方法，Servlet和客户的通信用"请求/响应"的模式。
========================================================================
2.Servlet可完成如下功能：
a.创建并返回基于客户请求的动态HTML页面。
b.创建可嵌入到现有HTML页面中的部分HTML页面(HTML片段).
c.与其他服务器资源(如数据库或基于java的应用程序)进行通信。
================================================================
3.Servlet的框架是由两个java包组成
a.javax.servlet包：定义了所有的Servlet类都必须实现或扩展的通用接口和类。
b.javax.servlet.http包：定义了采用HTTP协议通信的HttpServlet类。
================================================================
4.Servlet的生命周期：
init方法:负责初始化Servlet对象，在整个生命周期
中自会被调用一次；
service方法：负责响应客户的请求；
destroy方法：当Servlet对象退出生命周期时，负责释放占用的资源。
=============
======================================================
5.每一个Servlet都必须实现Servlet接口，GenericServlet是个通用的、不特定于任何协议的Servlet，它实现了Servlet接口，而HttpServlet继承于GenericServlet，因此HttpServlet也实现了Servlet接口，所以我们定义的Servlet只需要集HttpServlet父类即可。
========================================================================
6.Servlet接口中定义了一个service方法，HttpServlet对该方法进行了实现，实现方式就是将ServletRequest与ServletResponse转换为HttpServletRequest与HttpServletResponse。转换完毕后，会调用HttpServlet类中自己定义的service方法。
====================================================================
7.在HttpServlet类中的service方法中，首先获得到请求的方法名，然后根据方法名调用对应的doXXX方法，比如说请求方法为GET，那么就去调用doGet方法；请求方法为POST，那么就去调用doPost方法。
=====================================================================
8.在HttpServlet类中所提供的doGet、doPost等方法都是直接返回错误信息，所以我们需要在自己定义的Servlet类中override这些方法。
==================================================================
9.Servlet的多线程同步问题：Servlet本身是单实例的，这样当有多个用户同时访问某个Servlet时，会访问该唯一的Servlet实例中的成员变量，如果对成员变量进行写入操作，那就会导致Servlet的多线程问题，即数据不一致。
=====================================================================
10.解决Servlet多线程同步问题的最好方案：去除实例变量，使用局部变量。
=====================================================================
11.比较Servlet和jsp
a.有许多相似之处，都可以生成动态网页
b.JSP的优点是擅长于网页制作，生成动态页面，比较直观。JSP的缺点是不容易跟踪与排错。
c.Servlet是纯Java语言，擅长于处理流程和业务逻辑。Servlet的缺点是生成动态页面不直观。
=====================================================================
12.


