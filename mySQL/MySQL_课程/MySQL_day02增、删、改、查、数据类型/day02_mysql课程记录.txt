1、FROM子句给表取别名
为什么要使用别名：
	1）、可以简化SQL语句
	2）、多个表关联查询，在SELECT子句中区分字段

	person  id
	student id
	SELECT person.id, student.id FROM ...
	SELECT p.id, s.id FROM ....
方式：
	1）、在表名后面空格加上别名
	2）、在表名后面 as 加上 别名（通用）

2、distinct消除重复列
	使用场景：下拉选择框

3、函数（方法）
	封装了一些功能的程序体
	mod(5,2)
	mod就是MySQL中的一个函数：取余

4、比较运算符
等号：=，对比的是等号前后是否相等
注意：
	1）、进行字符比较时，默认不区分大小写	示例：'a' = 'A'，返回1（TRUE）
	2）、如果需要区分大小写进行比较，需要加上BINARY	示例：BINARY 'a' = 'A'，返回0（FALSE）

关于MySQL的boolean类型
	1）、MySQL数据库没有boolean数据类型，用tinyint(1)来表示boolean数据类型
	2）、0表示false，1表示true
	3）、在插入操作、查询操作的where后面当作条件使用时，可以用true、TRUE、false、FALSE、0、1进行匹配

BETWEEN AND
	比较在此区间之内（包括头和尾）

5、REGEXP正则表达式
	1）、默认不区分大小写
	2）、如果需要区分大小写进行比较需要：BINARY 'A' REGEXP 'a' 或者 'A' BINARY REGEXP 'a'
	3）、正则表达式取反用：NOT REGEXP

6、关于NULL
	1）、注意区分NULL和空值的区别
	2）、注意NULL值在大多数运算符中运算结果为NULL（除了安全等于<=>）

7、order by
对select结果集进行一个排序
	1）、默认排序：升序 asc
	2）、降序：desc
使用场景：页面表格的展示排序

8、LIMIT
	1）、只有一个参数：limit 4，从默认的第0条开始，共展示4条
	2）、两个参数：limit 2, 4，从第2条开始，共展示4条
使用场景：分页

	3）、获取特定列的最大值和最小值

9、聚合函数
	MAX()
	MIN()
	AVG()
	SUM()

	COUNT(*)：*代表表中所有的字段
		只要表中任意的字段有值，就会被统计
	COUNT(work)：
		只要work字段中有值（值不为NULL），都会被统计
	分页：count和limit联合使用

10、GROUP BY
	select后如果跟上聚合函数和字段列表，那么group by 后面必然要对字段列表进行分组
	select count(*), avg(salary), work, sex from user group by work,sex;

11、having
	和where很容易混淆
	区分：having用在对聚合函数结果集的过滤



	示例：找出平均年龄在30岁以上的工种
	分析：
	1）、平均年龄和工种（对工种进行分组）
	select avg(age), work from user group by work;
	2）、加上过滤条件
	select avg(age), work from user group by work where avg(age) > 30;
	select avg(age), work from user group by work having avg(age) > 30;

	示例：找出平均工资在2000以上，并且工种是java或者c++的工作
	分析：
	1）、平均工资和工种（对工种进行分组）
		小小知识点：给字段去别名
			1）、在查询的字段后面加上空格 别名
			2）、在查询的字段后面加上 as 别名
	select avg(salary) as a_s, work from user group by work;
	2）、过滤（工种是java或者c++）
	select avg(salary) as a_s, work from user where work in('java', 'c++') group by work;
	3）、过滤（平均工资在2000以上）
	select avg(salary) as a_s, work 
	from user 
	where work in('java', 'c++') 
	group by work
	having a_s > 2000;

	示例：找出人数是2位，总年龄在50岁以上的工种
	分析：
	1）、统计出人数、总年龄、工种（对工种进行分组）
	select count(*) num, sum(age) '总年龄', work from user group by work;
	select count(*) num, sum(age) s_a, work from user group by work;
	2）、过滤（人数、总年龄）
	select count(*) num, sum(age) s_a, work from user group by work 
	having num >2 and s_a>50;
	
12、UNION
	将多个select结果集拼接到一个结果集中

	mysql> select * from user where age<20 or name ='张三';
	等同：
	mysql> select * from user where age<20
	union
	select * from user where name='张三';


	select * from user where age>20
	union
	select * from user where name='张三';

	select * from user where age>20
	union all
	select * from user where name='张三';

13、MySQL数据类型
	MySQL整数型：5种
	orcale：NUMBER  NUMBER(5)  NUMBER(5,2)

14、MySQL创建表
	1）、选择合适的数据类型
	2）、创建的表的每一列应该有合适的列选项：
		包括：
			是否能为NULL：NOT NULL --被声明为不能为空
			默认值：DEFAULT --声明此列的一个默认值，代表当数据插入该表时，如果没有指定该列的值，那么就用默认值代替
			是否自增长（一个表只能有一列是自增长）：auto_increment --被声明为自增长的列，当数据被插入时，该列的值会根据系统的设定自动增长
			是否只能是正数：UNSIGNED --声明该列的值只能为正数
			是否唯一：unique --声明该列的值不能重复（如果它和NOT NULL一起使用，就类是与primary key）
			是否为主键（一个表只能声明一列是主键）：primary key --被声明为主键的列的值不能重复，不能为空
	3）、示例：创建用户信息表
	create table if not exists user1(
		id int primary key auto_increment,   #主键ID，自增长(从1开始，每条记录增加1个)
		name varchar(20) NOT NULL unique,  #姓名，不能为空
		sex enum('男', '女') NOT NULL default '男',  #性别，不能为空，默认值：男
		age int unsigned,  #年龄，不能为负数
		work varchar(200),
		memo varchar(2000)
	);
	等同
	create table if not exists user1(
		id int auto_increment,   #主键ID，自增长(从1开始，每条记录增加1个)
		name varchar(20) NOT NULL,  #姓名，不能为空
		sex enum('男', '女') NOT NULL default '男',  #性别，不能为空，默认值：男
		age int unsigned,  #年龄，不能为负数
		work varchar(200),
		memo varchar(2000),
		primary key(id),
		unique key(name)
	);

15、基于现有的表创建新表
	1）、create table xx as select * from xx;
		基于现有的表创建新表，将原来表中的数据复制一份
		但是，不能完全复制表结构中字段描述（主键，唯一键，默认值，自增长等）
	2）、create table xx like xx;
		基于现有的表创建新表，不会复制原来表中的数据
		但是，他会完全复制原来表的结构（主键，唯一键，默认值，自增长等）




IO 文件形式保存
MySQL,数据库的形式的保存
1、设计表
JDBC
2、用JAVA去操作数据库
JSP
3、界面




