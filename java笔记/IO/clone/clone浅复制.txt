/**
 * 浅复制
 * @author Administrator
 *1.为获得对象的一份拷贝，我们可以利用Object类的clone()方法
 *2.在派生类中覆盖基类的clone()方法，并申明为public
 *3.在派生类的clone()方法中，调用super.clone();
 *4.在派生类中实现Cloneable接口
 */
public class CloneTest {
	
	public static void main(String[] args) throws Throwable {		
		Student student = new Student();
		student.setAge(10);
		student.setName("zhangsan");
		
		Student student2 = (Student)student.clone();//拷贝对象
		System.out.println(student2.getAge());
		System.out.println(student2.getName());
		System.out.println("------------------------'");
		student2.setName("lisi");
		System.out.println(student.getName());
		System.out.println(student2.getName());
	}

}

/**
 * 派生类
 * @author Administrator
 *
 */
class Student implements Cloneable{
	private int age;
	private String name;
	/**
	 * 重写clone方法，并且为public
	 */
	@Override
	public  Object clone() throws CloneNotSupportedException {
		Object object = super.clone();
		return object;
	}
	//属性的get和set方法
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	
}
============================================================
运行结果：
10
zhangsan
------------------------'
zhangsan
lisi