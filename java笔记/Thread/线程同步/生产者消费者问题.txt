/**
 * 程序功能：生产者消费者问题，生产一个，消费一个，实现交替进行
 * @author Administrator
 *
 */
public class MainTest {

	public static void main(String[] args) {
		Sample sample = new Sample();
		Thread t1 = new IncreaceThread(sample);
		Thread t2 = new DecreaceThread(sample);
		Thread t3 = new IncreaceThread(sample);
		Thread t4 = new DecreaceThread(sample);
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();
	}
}

class Sample{
	int num;
	Object obj = new Object();
	//加的方法
	public synchronized void Increace(){	
		while(0 != num){
			try {
				wait();//等待
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		num++;
		System.out.println(num);
		notify();//唤醒线程
	}
	
	//减的方法
	public synchronized void Decrease(){
		while(0 == num){
			try {
				wait();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		num--;
		System.out.println(num);
		notify();
	}
}
/**
 * 加的线程，类似生产者
 * @author Administrator
 *
 */
class IncreaceThread extends Thread{
	private Sample sample;
	
	public IncreaceThread(Sample sample){
		this.sample = sample;
	}
	
	@Override
	public void run() {
		for(int i = 0;i < 10;i++){
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			sample.Increace();
		}
	}
}
/**
 * 减的线程，类似消费者
 * @author Administrator
 *
 */
class DecreaceThread extends Thread{
	private Sample sample;
	
	public DecreaceThread(Sample sample){
		this.sample = sample;
	}
	
	@Override
	public void run() {
		for(int i = 0;i < 10;i++){
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			sample.Decrease();
		}
	}
}

==================================================================
运行结果：1，0交替进行
1
0
1
0
1
0
1
0
1
0