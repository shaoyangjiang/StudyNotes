http://www.andcoder.com/archives-2011-08-173.html

private SoundPool soundPool;
1.先new出一个SoundPool

soundPool = new SoundPool(8,AudioManager.STREAM_MUSIC，0);

注意：在加载前要先SoundPool初始化完毕
方法是：
        soundPool.setOnLoadCompleteListener(new OnLoadCompleteListener() {		
			@Override
			public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
				// TODO Auto-generated method stub
				Toast.makeText(SoundPoolActivity.this, "加载中...", 1000).show();
			}
		});
2.加载
一般把音频加载到hashmap里。
private HashMap<Integer,Integer> SoundPoolMap = new HashMap<Integer,Integer>();

SoundPoolMap.put(1,soundPool.load(this,R.raw.shao,1));

3.播放
soundPool.play(SoundPoolMap.get(index[i],0.5f,0.5f,0,0,1.0f));


4.停止，一般在onDestroy里进行
soundPool.release();
////////////////////////////////////////////////////////////////////////////////
下面是一个具体实例，在TextView里输入一串数字，按下Button后播放
public class SoundPoolActivity extends Activity {
	//音频数组
	private static int[] audios = {R.raw.s0,R.raw.s1,R.raw.s2,R.raw.s3,R.raw.s4,R.raw.s5,R.raw.s6,R.raw.s7};
    private EditText et1;
    private Button bt1;
    private SoundPool soundPool;
    //用来存放音频
    private HashMap<Integer,Integer>  SoundPoolMap = new HashMap<Integer,Integer>();
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);
       
        et1 = (EditText)findViewById(R.id.et1);
        bt1 = (Button)findViewById(R.id.bt1);
        bt1.setOnClickListener(new OnClickListener() {			
			@Override
			public void onClick(View v) {
				String str = et1.getText().toString();
				int[] index = parseSI(str);
				new myThread(index).start();
			}
		});
        //new出soundPool对象
        soundPool = new SoundPool(8, AudioManager.STREAM_MUSIC, 0);
        //soundPool初始化完毕
        soundPool.setOnLoadCompleteListener(new OnLoadCompleteListener() {		
			@Override
			public void onLoadComplete(SoundPool soundPool, int sampleId, int status) {
				// TODO Auto-generated method stub
				Toast.makeText(SoundPoolActivity.this, "加载中...", 1000).show();
			}
		});
        //加载
        sound_init();
       
    }
    //加载
    private void sound_init(){
    	for(int i=0;i<8;i++){
    		SoundPoolMap.put(i, soundPool.load(SoundPoolActivity.this, audios[i], 1));	
    	}
    }
    //把字符串转化为int类型的数组
    private int[] parseSI(String str){
    	int[] sources = new int[str.length()];
    	for(int i=0;i<str.length();i++){
    		sources[i] = str.charAt(i) - 48;
    		System.out.println("sources:" +sources[i]);
    	}
		return sources;	
    }
    
    public class myThread extends Thread{
    	int[] index;

		public myThread(int[] index) {
			super();
			this.index = index;
		}

		@Override
		public void run() {
			super.run();
			for(int i=0;i<index.length;i++){
				//播放音频
				soundPool.play(SoundPoolMap.get(index[i]), 0.5f, 0.5f, 0, 0, 1.0f);
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}   	
    }

	@Override
	protected void onDestroy() {
		// TODO Auto-generated method stub
		super.onDestroy();
		//释放资源
		soundPool.release();		
	}   
}