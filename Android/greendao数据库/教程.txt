http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0727/3223.html
=======================================================
首先在项目中建一个java库，目的是生成数据库，DAO类构造器。
-----------------------
第二在build.gradle中添加
compile 'de.greenrobot:greendao-generator:1.3.1'
----------------------------------------------
如新建一个daoExampleGenerator项目，包名：com.xx.xx,类名：ExampleDaoGenerator
-----------------------------------
public class ExampleDaoGenerator {

    public static void main(String[] args) throws Exception {
        // 正如你所见的，你创建了一个用于添加实体（Entity）的模式（Schema）对象。
        // 两个参数分别代表：数据库版本号与自动生成代码的包路径。
        Schema schema = new Schema(1, "com.example.greendao");
//      当然，如果你愿意，你也可以分别指定生成的 Bean 与 DAO 类所在的目录，只要如下所示：
//      Schema schema = new Schema(1, "me.itangqi.bean");
//      schema.setDefaultJavaPackageDao("me.itangqi.dao");

        // 模式（Schema）同时也拥有两个默认的 flags，分别用来标示 entity 是否是 activie 以及是否使用 keep sections。
        // schema2.enableActiveEntitiesByDefault();
        // schema2.enableKeepSectionsByDefault();

        // 一旦你拥有了一个 Schema 对象后，你便可以使用它添加实体（Entities）了。
        addNote(schema);

        // 最后我们将使用 DAOGenerator 类的 generateAll() 方法自动生成代码，此处你需要根据自己的情况更改输出目录（既之前创建的 java-gen)。
        // 其实，输出目录的路径可以在 build.gradle 中设置，有兴趣的朋友可以自行搜索，这里就不再详解。MaterialTabTest是项目名
        new DaoGenerator().generateAll(schema, "../MaterialTabTest/app/src/main/java");
    }

    /**
     * @param schema
     */
    private static void addNote(Schema schema) {
        // 一个实体（类）就关联到数据库中的一张表，此处表名为「Note」（既类名）
        Entity note = schema.addEntity("Note");
        // 你也可以重新给表命名
        // note.setTableName("NODE");

        // greenDAO 会自动根据实体类的属性值来创建表字段，并赋予默认值
        // 接下来你便可以设置表中的字段：
        note.addIdProperty();
        note.addStringProperty("articleId").notNull();
        // 与在 Java 中使用驼峰命名法不同，默认数据库中的命名是使用大写和下划线来分割单词的。
        // For example, a property called “creationDate” will become a database column “CREATION_DATE”.
        note.addStringProperty("articleText");
        note.addStringProperty("picUrl");
        note.addStringProperty("openUri");

    }
}
-----------------------------------------------------
运行这个java项目，你会发现在你自己的项目中会多出来几个文件。
=============================================================
在android项目中，首先在build中添加
sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'src/main/java-gen']
    }
}

dependencies {
    compile 'de.greenrobot:greendao:1.3.7'
}
============================================================
然后要初始化数据库，在androidMainfast.xml中添加android:name=".BaseApplication"
public class BaseApplication extends Application {
    public DaoSession daoSession;
    public SQLiteDatabase db;
    public DaoMaster.DevOpenHelper helper;
    public DaoMaster daoMaster;

    @Override
    public void onCreate() {
        super.onCreate();
        setupDatabase();
    }

    private void setupDatabase() {
        // 通过 DaoMaster 的内部类 DevOpenHelper，你可以得到一个便利的 SQLiteOpenHelper 对象。
        // 可能你已经注意到了，你并不需要去编写「CREATE TABLE」这样的 SQL 语句，因为 greenDAO 已经帮你做了。
        // 注意：默认的 DaoMaster.DevOpenHelper 会在数据库升级时，删除所有的表，意味着这将导致数据的丢失。
        // 所以，在正式的项目中，你还应该做一层封装，来实现数据库的安全升级。
        helper = new DaoMaster.DevOpenHelper(this, Constants.DB_NAME, null);
        db = helper.getWritableDatabase();
        // 注意：该数据库连接属于 DaoMaster，所以多个 Session 指的是相同的数据库连接。
        daoMaster = new DaoMaster(db);
        daoSession = daoMaster.newSession();
    }

    public DaoSession getDaoSession() {
        return daoSession;
    }

    public SQLiteDatabase getDb() {
        return db;
    }

}
======================================
增删改查相关文章：http://glblong.blog.51cto.com/3058613/1354953
在activity中
    //添加数据
    private void addNote(int position) {
        Note note = new Note(null,articleInfos.get(position).getId(),articleInfos.get(position).getArticleText(),articleInfos.get(position).getPicUrl(),articleInfos.get(position).getOpenUri());
        getNoteDao().insert(note);
        Logger.d("插入数据" + note.getId() + note.getArticleText());
        Log.d("DaoExample", "Inserted new note, ID: " + note.getId());
       // cursor.requery();

    }

查询所有数据
public List<Note> chaxuan()
{
    QueryBuilder<Note> qb = getNoteDao().queryBuilder();
    return qb.list();
}

    //得到具体的dao
    private NoteDao getNoteDao() {
        // 通过 BaseApplication 类提供的 getDaoSession() 获取具体 Dao
        return ((BaseApplication) this.getActivity().getApplicationContext()).getDaoSession().getNoteDao();
    }

    //得到数据库
    private SQLiteDatabase getDb() {
        // 通过 BaseApplication 类提供的 getDb() 获取具体 db
        return ((BaseApplication) this.getActivity().getApplicationContext()).getDb();
    }
-----------------------------------------------
